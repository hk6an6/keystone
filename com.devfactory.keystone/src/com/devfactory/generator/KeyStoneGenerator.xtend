/*
 * generated by Xtext
 */
package com.devfactory.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import java.util.Stack
import com.devfactory.keyStone.Action
import com.devfactory.keyStone.KeyboardActionParams
import com.devfactory.keyStone.MouseActionParams
import com.devfactory.keyStone.ExpressionStatement
import com.devfactory.keyStone.Expression
import com.devfactory.keyStone.Step
import com.devfactory.keyStone.Assertion
import com.devfactory.keyStone.WaitActionParams
import com.devfactory.keyStone.KeyValuePair
import com.devfactory.keyStone.PauseActionParams
import com.devfactory.keyStone.DragActionParams
import com.devfactory.keyStone.OpenBrowserActionParams
import com.devfactory.keyStone.SearchSettings
import com.devfactory.keyStone.StringLiteral
import com.devfactory.keyStone.BrowseToActionParams
import com.devfactory.keyStone.RegularExpression
import com.devfactory.keyStone.Assignment
import com.devfactory.keyStone.NumberLiteral
import com.devfactory.keyStone.BooleanLiteral
import com.devfactory.keyStone.Javascript

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class KeyStoneGenerator implements IGenerator {
	Stack<String> callStack;
	String testCaseName = ''
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {

		//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
		//			resource.allContents
		//				.filter(typeof(Greeting))
		//				.map[name]
		//				.join(', '))
		if(resource!=null && resource.URI!=null && resource.URI.segmentCount>0){
			testCaseName = resource.URI.segment(resource.URI.segmentCount-1)
			testCaseName = testCaseName.substring(0,testCaseName.lastIndexOf('.'))
		} else {
			testCaseName = ''
		}
		callStack = new Stack<String>();
		fsa.generateFile('''«testCaseName».sj'''.toString,
			(if (testCaseName != '' && testCaseName!= 'MyFile') {'''function «testCaseName»(){«'\n'»'''} else {''}) +
			resource.allContents.toIterable.filter[type|type instanceof ExpressionStatement].map[e|
				(e as ExpressionStatement).expression.map[step|(step as Step).compile].join("\n")].join('')
			+ (if (testCaseName != '' && testCaseName!= 'MyFile') {"}"} else {''})
		)
	}

	def prepareCallTarget(Expression context) {
		var target = ''
		if (callStack.size > 1) {
			if(callStack.peek.startsWith("FindAllChildren([") && context instanceof SearchSettings)
				target = '''(new VBArray($_.«callStack.peek»)).toArray()[«(context as SearchSettings).index.compile?:"0"»]'''.toString
			else
				target = '''$_.«callStack.peek»'''.toString
		} else {
			target = callStack.toList.join('.')	
		}
	}
	
	def compile(Assignment assignment){
		'''«assignment.variableName.compile» = «IF !(assignment.assignedValue instanceof StringLiteral || assignment.assignedValue instanceof NumberLiteral || assignment.assignedValue instanceof BooleanLiteral)»$_.«ENDIF»«assignment.assignedValue.compile»;'''
	}

	def compile(Step step) {
		var compiled = ''''''
		callStack.push(step.context.compile())
		prepareCallTarget(step.context)
		compiled += 
'''
(function($_){
«IF step.folderName!=null»
try{Log.AppendFolder("«step.folderName.trim.substring(1)»");
«ENDIF»
var $_=«prepareCallTarget(step.context)»;
«FOR action : step.actions»
	«IF action instanceof Action»
		«(action as Action).compile»
	«ELSEIF action instanceof Step»
		«(action as Step).compile»
	«ELSEIF action instanceof Assertion»
		«(action as Assertion).compile»
	«ELSEIF action instanceof Assignment»
		«(action as Assignment).compile»
	«ELSEIF action instanceof Javascript»
		«(action as Javascript).compile»
	«ENDIF»
«ENDFOR»«IF step.folderName!=null»
}finally{Log.PopLogFolder();}
«ENDIF»
})(«IF callStack.size > 1»$_«ENDIF»);
'''
		callStack.pop()
		prepareCallTarget(step.context)
		compiled
	}

	def compile(Expression expression) {
		var compiled = ''
		if (expression.op != null) {
			switch (expression.op) {
				case 'of': {
					compiled += expression.right.compile() + '.'
					compiled += expression.left.compile()
				}
				case '(': {
					compiled += expression.left.compile() + '('
					compiled += expression.arguments.map[compile].join(',') + ')'
				}
				case '.': {
					compiled += expression.left.compile() + '.'
					compiled += expression.right.compile()
				}
				case '[': {
					compiled +=
						'''FindAllChildren([«(expression as SearchSettings).properties.map['''"«value»"'''].join(',')»], [«(expression as SearchSettings).expected.map[compile].join(',')»]«IF (expression as SearchSettings).depth != null»,«(expression as SearchSettings).depth.compile»«ENDIF»)'''
				}
			}
		} else if (expression instanceof StringLiteral){
			compiled += (expression as StringLiteral).compile
		} else {
			compiled += expression.value
		}
		compiled
	}

	def compile(KeyboardActionParams actionParams) {
		'''«IF actionParams.overwrite»('^a'+«ENDIF»«(actionParams.text as Expression).compile»«IF actionParams.overwrite»)«ENDIF»'''
	}

	def compile(MouseActionParams actionParams) {
		if (actionParams == null)
			return ''
		val parameters = #[actionParams.x.compile, actionParams.y.compile]
		parameters.join(',')
	}

	def compile(KeyValuePair keyValue, boolean negated) {
		if (keyValue.left != null) {
			'''(«keyValue.left.compile(negated)» && «keyValue.right.compile(negated)»)'''
		} else {
			if(keyValue.value instanceof RegularExpression){
				'''«IF negated»!«ENDIF»aqString.StrMatches(«(keyValue.value as RegularExpression).compile», $_.«(keyValue.property as Expression).compile»)'''
			} else if (keyValue.valueIsRegex) {
				'''«IF negated»!«ENDIF»aqString.StrMatches(«(keyValue.value as Expression).compile», $_.«(keyValue.property as Expression).compile»)'''
			} else {
				if(keyValue.operator!=null){
					val operator = (switch(keyValue.operator){case "lt": {'<'} case "lte": {'<='} case "gt": {'>'} case "gte": {'>='} })
					(if(negated) "!(" else "") + '''$_.«(keyValue.property as Expression).compile» «operator» «(keyValue.value as Expression).compile»''' + (if(negated) ")" else "")
				} else {
					'''$_.«(keyValue.property as Expression).compile» «IF negated»!«ELSE»=«ENDIF»= «(keyValue.value as Expression).compile»'''
				}
			}
		}
	}
	
	def text(KeyValuePair keyValue, boolean negated) {
		if (keyValue.left != null) {
			'''«keyValue.left.text(negated)» + " && " + «keyValue.right.text(negated)»'''
		} else {
			if(keyValue.value instanceof RegularExpression){
				'''"«(keyValue.value as RegularExpression).value» ~«IF negated»!«ELSE»=«ENDIF» " + $_.«(keyValue.property as Expression).compile»'''
			} else if (keyValue.valueIsRegex) {
				'''"/"+«(keyValue.value as Expression).compile.toString.replace("\"","\\\"")»+"/ ~«IF negated»!«ELSE»=«ENDIF» " + $_.«(keyValue.property as Expression).compile»'''
			} else {
				if(keyValue.operator!=null){
						val operator = (switch(keyValue.operator){case "lt": {'less than'} case "lte": {'equal or less than'} case "gt": {'greater than'} case "gte": {'equal or greater than'} })
						'''$_.«(keyValue.property as Expression).compile» + " «IF negated»not «ENDIF»«operator» " + «(keyValue.value as Expression).compile»'''
				}else{
					'''$_.«(keyValue.property as Expression).compile» + " «IF negated»!«ELSE»=«ENDIF»= " + «(keyValue.value as Expression).compile»'''
				}
			}
		}
	}

	def compile(Assertion assert) {
		if(assert.child!=null){
			val child = '''(new VBArray($_.«(assert.child as SearchSettings).compile»)).toArray()'''
			val message = '''object does«IF assert.negated» not«ENDIF» exist'''
			'''if(«IF assert.negated»!«ENDIF»(«child».length)){Log.Checkpoint("«message»","«message»",300, undefined, ($_ && aqObject.IsSupported($_, "Picture")) ? $_.Picture(): null);}else{Log.Error("«message»");};'''
		}else{
			val condition = assert.filter.compile(assert.negated)
			val textRepresentationForCondition = assert.filter.text(assert.negated) //'''"« condition.toString.replace("\"","\\\"") »"'''
			'''if(«condition»){Log.Checkpoint(«textRepresentationForCondition», 'passed', 300, undefined, ($_ && aqObject.IsSupported($_, "Picture")) ? $_.Picture(): null);}else{Log.Error(«textRepresentationForCondition»)}'''	
		}
	}
	
	def compile(DragActionParams dragParams){
		var dragStartX = 'Math.floor($_.Width/2)'
		var dragStartY = 'Math.floor($_.Height/2)'
		if(dragParams.grab){
			dragStartX = dragParams.OX
			dragStartY = dragParams.OY
		} 
		'''$_.Drag(«dragStartX»,«dragStartY»,''' +
		(if(dragParams.target != null){
			val dropsite = '''«dragParams.target.compile»'''
			'''(«dropsite».Left+«IF dragParams.x != null»«dragParams.x»«ELSE»Math.floor(«dropsite».Width/2)«ENDIF») - ($_.Left + «dragStartX»), («dropsite».Top+«IF dragParams.y != null»«dragParams.y»«ELSE»Math.floor(«dropsite».Height/2)«ENDIF») - ($_.Top + «dragStartY»)'''
		} else {
			'''«dragParams.x»- ($_.Left + «dragStartX»), «dragParams.y»- ($_.Top + «dragStartY»)'''				
		})
		+ ''');'''
	}
	
	def compile(StringLiteral string){
		if(string.value.indexOf("\"")>=0)
			"\'" + string.value + "\'"
		else
			'''"«string.value»"'''
	}
	
	def compile(RegularExpression regex){
		var trimmed = regex.value.substring(1)
		trimmed = trimmed.substring(0, trimmed.length() - 1)
		if(regex.value.indexOf("\"")>=0)
			"\'" + trimmed + "\'"
		else
			'''"«trimmed»"'''
	}
	
	def compile(WaitActionParams waitParams){
		val command = '''wait«IF waitParams.propertyName!= null»Property«ELSE»Child«ENDIF»(«IF waitParams.propertyName!= null»«waitParams.propertyName.compile»,«ENDIF»«waitParams.expectedValue.compile»,«waitParams.delayTime»)'''
		if(waitParams.propertyName!=null){
			'''if(!$_.«command») throw "Wait condition was never met. Try waiting longer.";'''
		} else {
			'''if(!$_.«command».Exists) throw "Child object was not found. Try waiting longer";'''
		}
	}
	
	def compile(OpenBrowserActionParams openParams){
		val browserName = switch(openParams.browserName){ 
			case "InternetExplorer": {"btIExplorer"}
			case "Firefox": {"btFirefox"}
			case "Chrome": {"btChrome"}
			case "Opera": {"btOpera"}
			case "Safari": {"btSafari"}
		}
		'''$_.Item(«browserName»).Run();'''
	}
	
	def compile(BrowseToActionParams browseToParams){
		'''$_.Navigate(«browseToParams.url.compile»);'''
	}
	
	def compile(Javascript javascript){
		'''(function($_){«"\n"»//begin script injection«"\n"»«javascript.code.substring(2,javascript.code.length-2)»«"\n"»//end script injection«"\n"»})($_);'''
	}

	def compile(Action action) {
		if (action.name == 'type') {
			('$_.Keys(' + (action.actionParams as KeyboardActionParams).compile() + ');')
		} else if (action.name == 'pause') {
			'aqUtils.Delay(' + (action.actionParams as PauseActionParams).timePaused + ');'
		} else if (action.name == 'wait') {
			(action.actionParams as WaitActionParams).compile
		} else if (action.name == 'drag'){
			(action.actionParams as DragActionParams).compile
		} else if (action.name == 'open') {
			(action.actionParams as OpenBrowserActionParams).compile
		} else if (action.name == 'browse') {
			(action.actionParams as BrowseToActionParams).compile
		} else if (action.name == 'close' || action.name == 'terminate' || action.name == "maximize" || action.name == "run" || action.name == "refresh" ) {
			'''$_.«action.name.toFirstUpper»();'''
		} else if ( action.name == 'aliasedRefresh' ){
			'''$_.Refresh();$_.RefreshMappingInfo();'''
		} else {
			'$_.' + (switch (action.name) {
				case 'click': {
					'Click'
				}
				case 'right click': {
					'ClickR'
				}
				case 'middle click': {
					'ClickM'
				}
				case 'double click': {
					'DblClick'
				}
				case 'hover': {
					'HoverMouse'
				}
			}) + (if(action.actionParams instanceof MouseActionParams) '(' + (action.actionParams as MouseActionParams).compile() + ');' else "();")
		}
	}
}
